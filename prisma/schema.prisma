generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "mysql"
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  username             String               @id
  fullname             String?
  email                String?
  dob                  DateTime?
  disabilities         String?
  yearsDriving         Int?
  homeStreet           String?
  homeCity             String?
  homeCountry          String?
  homeProvince         String?
  homePostalCode       String?
  businessStreet       String?
  businessCity         String?
  businessCountry      String?
  businessProvince     String?
  businessPostalCode   String?
  phoneNumber          String?
  driverLicense        String?
  isAdmin              Boolean              @default(false)
  PolicyClient         PolicyClient[]
  Report_Personal_Info ReportPersonalInfo[]
  ReportReviewed       Report[]
}

model PolicyClient {
  policyClientId  Int             @id @default(autoincrement())
  username        String
  policyId        Int
  InsurancePolicy InsurancePolicy @relation(fields: [policyId], references: [policyId], onDelete: Cascade, onUpdate: Cascade)
  User            User            @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
}

model InsurancePolicy {
  policyId           Int               @id @default(autoincrement())
  insurer            String
  insurerName        String
  Agent              String
  homeStreet         String
  homeCity           String
  homeCountry        String
  homeProvince       String
  homePostalCode     String
  businessStreet     String?
  businessCity       String?
  businessCountry    String?
  businessProvince   String?
  businessPostalCode String?
  policyNumber       String @unique
  PolicyClient       PolicyClient[]
  Vehicle_Policy     VehiclePolicy[]
  Report_Insurance   ReportInsurance[]
}

model VehicleInformation {
  licensePlateNo            String              @id
  registeredOwner           String
  actualOwner               String
  registeredOwnerStreet     String
  registeredOwnerCity       String
  registeredOwnerCountry    String
  registeredOwnerProvince   String
  registeredOwnerPostalCode String
  actualOwnerStreet         String
  actualOwnerCity           String
  actualOwnerCountry        String
  actualOwnerProvince       String
  actualOwnerPostalCode     String
  province                  String
  make                      String
  year                      Int
  model                     String
  type                      String
  VIN                       String
  Vehicle_Policy            VehiclePolicy[]
  VehicleWitness            VehicleWitness[]
  Report_VehicleInfo        ReportVehicleInfo[]
}

model VehiclePolicy {
  VehiclePolicyId    Int                @id @default(autoincrement())
  policyId           Int
  licensePlateNo     String
  VehicleInformation VehicleInformation @relation(fields: [licensePlateNo], references: [licensePlateNo], onDelete: Cascade, onUpdate: Cascade)
  InsurancePolicy    InsurancePolicy    @relation(fields: [policyId], references: [policyId], onDelete: Cascade, onUpdate: Cascade)
}

model Report {
  reportId            Int                   @id @default(autoincrement())
  dayTime             DateTime
  dayLight            DayLight
  roadCondition       String
  weatherCondition    String
  location            String
  accidentDescription String
  comment             String?
  flag                String?
  adminComments       String?
  speed               Int
  direction           String
  purposeForUsage     String
  damageDescription   String?
  EstimateOfDamage    Severity
  AdminId             String?
  PersonInjured       personInjured[]
  PoliceInvestigation PoliceInvestigation[]
  Witness             Witness[]
  Evidence            Evidence[]
  Insurance           ReportInsurance[]
  PersonalInfo        ReportPersonalInfo[]
  VehicleInfo         ReportVehicleInfo[]
  PropertyDamage      PropertyDamage[]
  Admin               User?                 @relation(fields: [AdminId], references: [username], onDelete: Cascade, onUpdate: Cascade)
}

model personInjured {
  id               Int      @id @default(autoincrement())
  name             String
  phone            String
  street           String
  city             String
  country          String
  province         String
  postalCode       String
  hospital         String
  natureOfInjuries String
  reportId         Int
  Report           Report   @relation(fields: [reportId], references: [reportId], onDelete: Cascade, onUpdate: Cascade)
}

model PoliceInvestigation {
  id                      Int     @id @default(autoincrement())
  policeReportNo          String
  reportId                Int
  Report                  Report  @relation(fields: [reportId], references: [reportId], onDelete: Cascade, onUpdate: Cascade)
}

model Witness {
  id         Int              @id @default(autoincrement())
  name       String
  phone      String
  street     String
  city       String
  country    String
  province   String
  postalCode String
  whichCar   VehicleWitness[]
  reportId   Int
  Report     Report           @relation(fields: [reportId], references: [reportId], onDelete: Cascade, onUpdate: Cascade)
}

model VehicleWitness {
  id                 Int                @id @default(autoincrement())
  witnessId          Int
  licensePlateNo     String
  VehicleInformation VehicleInformation @relation(fields: [licensePlateNo], references: [licensePlateNo], onDelete: Cascade, onUpdate: Cascade)
  Witness            Witness            @relation(fields: [witnessId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Evidence {
  id       Int    @id @default(autoincrement())
  name     String
  size     Int
  contentType String
  data     Bytes
  reportId Int
  Report   Report @relation(fields: [reportId], references: [reportId], onDelete: Cascade, onUpdate: Cascade)
}

model PropertyDamage {
  id                  Int      @id @default(autoincrement())
  nameOwner           String
  phoneOwner          String
  ownerStreet         String
  ownerCity           String
  ownerCountry        String
  ownerProvince       String
  ownerPostalCode     String
  licenseNumberOwner  String
  ownerProvIssue      String
  yearOfVehicle       Int
  nameInsurer         String
  policyNumber        String
  nameDriver          String
  phoneDriver         String
  driverStreet        String
  driverCity          String
  driverCountry       String
  driverProvince      String
  driverPostalCode    String
  driverLicenseNumber String
  driverProvIssue     String
  reportId            Int
  Report              Report   @relation(fields: [reportId], references: [reportId], onDelete: Cascade, onUpdate: Cascade)
}

model ReportInsurance {
  id              Int             @id @default(autoincrement())
  policyId        Int
  reportId        Int
  Report          Report          @relation(fields: [reportId], references: [reportId], onDelete: Cascade, onUpdate: Cascade)
  InsurancePolicy InsurancePolicy @relation(fields: [policyId], references: [policyId], onDelete: Cascade, onUpdate: Cascade)
}

model ReportPersonalInfo {
  id       Int    @id @default(autoincrement())
  username String
  reportId Int
  Report   Report @relation(fields: [reportId], references: [reportId], onDelete: Cascade, onUpdate: Cascade)
  User     User   @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
}

model ReportVehicleInfo {
  id                 Int                @id @default(autoincrement())
  reportId           Int
  licensePlateNo     String
  VehicleInformation VehicleInformation @relation(fields: [licensePlateNo], references: [licensePlateNo], onDelete: Cascade, onUpdate: Cascade)
  Report             Report             @relation(fields: [reportId], references: [reportId], onDelete: Cascade, onUpdate: Cascade)
}

enum DayLight {
  dark
  dayLight
  dusk
}

enum Severity {
  minor
  medium
  major
}
